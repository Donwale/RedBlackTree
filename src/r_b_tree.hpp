#include <memory>

/// Вершина дерева
/**
  Класс для отдельной вершины красно-черного дерева
*/
struct tree_node {

  /// значение данной вершины
  int value;

  /// цвет данной вершины(0 - красный, 1 - черный)
  int black;

  /// указатель на родителя
  tree_node *up;

  /// указатель на левого ребёнка
  std::unique_ptr<tree_node> left;

  /// указатель на правого ребёнка
  std::unique_ptr<tree_node> right;
};

///Красно-черное дерево
/**
  Класс для всего красно-черного дерева
  */
struct tree {

  /// указатель на корень дерева
  std::unique_ptr<tree_node> root;

  /**
  \brief Добавить новую вершину
  Добавляет в дерево вершину с заданным значением с последующей балансировкой,
  возвращает указатель на эту вершину

  \param val -- заданное значение
  */
  auto insert(int val) -> tree_node *;

  /**
  \brief Удалить вершину
  Удаляет вершину с заданным значением с последующей балансировкой,
возвращает true, если вершина была найдена и удалена

  \param val -- заданное значение
  */
  auto remove(int val) -> bool;

  /**
  \brief Малый левый поворот
  Левый поворот относительно данной вершины(данная вершина станет левым
ребёнком), возвращает указатель на новое положение вершины

  \param center_node -- указатель на данную вершину
  */
  auto left_rotation(tree_node *center_node) -> tree_node *;

  /**
  \brief Малый правый поворот
  Правый поворот относительно данной вершины(данная вершина станет правым
ребёнком), возвращает указатель на новое положение вершины

  \param center_node -- указатель на данную вершину
  */
  auto right_rotation(tree_node *center_node) -> tree_node *;

  /**
  \brief Получить цвет любой вершины
  Возвращает цвет данной вершины. Если данной вершиный нет,
то возращает 1(чёрный)

  \param center_node -- указатель на данную вершину
  */
  auto get_color(tree_node *center_node) -> int;

  /**
  \brief Узнать как родитель ссылается на эту вершину
  Возвращает 0, если данная вершина является корнем.
  Возвращает 1, если данная вершина является левым ребёнком для своего родителя.
  Возвращает 2, если данная вершина является правым ребёнком для своего
  родителя.

  \param center_node -- указатель на данную вершину
  */
  auto what_child_is_it(tree_node *center_node) -> int;

private:
  /**
  \brief Балансировка после вставки
  Балансирует данную вершину при добавлении её в дерево,
возвращает указатель на новое положение вершины

  \param center_node -- указатель на данную вершину
  */
  auto balance_insert(tree_node *center_node) -> tree_node *;

  /**
  \brief Балансировка перед удалением
  Балансирует данную вершину, которая будет удалена из дерева,
возвращает указатель на новое положение вершины, при котором её можно будет
удалить

  \param center_node -- указатель на данную вершину
  */
  auto balance_remove(tree_node *center_node) -> tree_node *;
};